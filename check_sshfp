#!/usr/bin/env python3
# check_sshfp: Nagios plugin for checking SSHFP records
# Copyright (C) 2015 John Stumpo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Usage: check_sshfp --help
#
# Considers existing SSHFPs for non-offered key types and missing SSHFPs for
# offered key types to be WARNING, and incorrect SSHFPs to be CRITICAL.

import dns.resolver, dns.rdatatype
import sys
import subprocess
import hashlib
import base64
import binascii
import traceback
import argparse


VERSION = "0.1"

# SSHFP algorithm numbers to their SSH names.
SSHFP_KEY_ALGS = {
  1: 'ssh-rsa',
  2: 'ssh-dss',
  3: 'ecdsa-sha2-nistp256',
  4: 'ssh-ed25519',
}

# SSHFP fingerprint type numbers to functions computing them.
SSHFP_FP_ALGS = {
  1: lambda m: hashlib.sha1(m).digest(),
  2: lambda m: hashlib.sha256(m).digest(),
}


def nagios_ok(msg: str) -> None:
    print("SSHFP OK - " + msg)
    sys.exit(0)


def nagios_warning(msg: str) -> None:
    print("SSHFP WARNING - " + msg)
    sys.exit(1)


def nagios_critical(msg: str) -> None:
    print("SSHFP CRITICAL - " + msg)
    sys.exit(2)


def nagios_unknown(msg: str) -> None:
    print("SSHFP UNKNOWN - " + msg)
    sys.exit(3)

def create_resolver(dnssec: bool = True,
                    timeout: int = None,
                    nameserver: str = None) -> dns.resolver.Resolver:
    resolver = dns.resolver.Resolver()

    if timeout and timeout != 0:
        resolver.lifetime = timeout

    if nameserver:
        resolver.nameservers = [nameserver]

    if dnssec:
        resolver.edns = 0
        resolver.payload = 1280
        resolver.ednsflags = dns.flags.DO

    return resolver

def check_dns_response_auth(response: dns.resolver.Answer) -> bool:
    if response.response.flags & dns.flags.AD:
        return True
    else:
        return False



def check_sshfp_for_host(args: argparse.Namespace):

    resolver = create_resolver(dnssec=args.dnssec, timeout=args.timeout, nameserver=args.nameserver)

#    sshfp_result = resolver.query(hostname,dns.rdatatype.SSHFP, raise_on_no_answer=False)

    # First, get the SSHFPs.
    try:
        sshfp_records = resolver.resolve(args.host, dns.rdatatype.SSHFP, raise_on_no_answer=False)
    except dns.resolver.NXDOMAIN:
        nagios_critical("No SSHFP records found: {}".format(args.host))
    except dns.exception.Timeout:
        nagios_unknown("DNS query timeout: {}".format(args.host))

    if args.dnssec and not check_dns_response_auth(sshfp_records):
        nagios_unknown("DNS query not DNSSEC validated")


    # Turn them into a more convenient representation.
    sshfps = {}
    for record in sshfp_records.rrset:
        sshfps.setdefault(SSHFP_KEY_ALGS[record.algorithm], {'seen': False, 'fingerprints': []})['fingerprints'].append((SSHFP_FP_ALGS[record.fp_type], record.fingerprint))

    # ssh-keyscan puts status info on stderr, and there's no option
    # to make it not do that. But we still want real errors to be
    # passed through on stderr... and keys (on stdout) might be big,
    # so we might deadlock if we read all the way through one stdio
    # stream without also reading the other simultaneously... DansGame.
    subproc = subprocess.Popen(['ssh-keyscan', '-t', 'rsa,dsa,ecdsa,ed25519', '-p', str(args.port), args.host], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = subproc.communicate()
    cleaned_stderr = '\n'.join(line for line in stderr.decode().splitlines() if not line.startswith('#'))
    # It can also return 0 even if there were critical problems
    # checking for keys... assume such if there's no output. Double-DansGame.
    if subproc.wait() != 0 or stdout == b'':
        print('SSHFP CRITICAL: ssh-keyscan failed: ' + cleaned_stderr)
        sys.exit(2)

    # Check that each key has at least one SSHFP, and that all of
    # that algorithm's SSHFPs match the key.
    for line in stdout.decode().splitlines():
        host, algorithm, key = line.strip().split()
        try:
            sshfp = sshfps[algorithm]
        except KeyError:
            nagios_warning("No record for algorithm {} offered by server.".format(algorithm))

        sshfp['seen'] = True
        for hashfunc, correct_fp in sshfp['fingerprints']:
            observed_fp = hashfunc(base64.b64decode(key.encode()))
            if observed_fp != correct_fp:
                nagios_critical("Fingerprint mismatch: SSHFP {}, observed {}.".format(binascii.hexlify(correct_fp).decode(),binascii.hexlify(observed_fp).decode()))

    # Check that there are no extra SSHFPs.
    for algorithm, sshfp in sshfps.items():
        if not sshfp['seen']:
            nagios_warning("Record present for algorithm {} not offered by server.".format(algorithm))

    nagios_ok("{} records for {} algorithms.".format(len(sshfp_records.rrset),len(sshfps)))


def main() -> None:
    parser = argparse.ArgumentParser(description=""" Nagios/Icinga plugin for checking SSHFP records.
                                     It compares SSHFP records against the fingerprints of the SSH host keys provided
                                     by a corresponding service.""")

    parser.add_argument("--host", "-H", dest="host", required=True, help="Hostname to check.")
    parser.add_argument("--port", "-p", type=int, required=True, help="TCP port to check.")
    parser.add_argument("--no-dnssec", dest="dnssec", action="store_false",
                        help="Continue even when DNS replies aren't DNSSEC authenticated.")
    parser.add_argument("--nameserver", help="Use a custom nameserver.")
    parser.add_argument("--timeout", type=int, default=10, help="Network timeout in sec. Default: 10")
    parser.add_argument("--version", action="version", version="%(prog)s " + VERSION)
    args = parser.parse_args()

    pyver = sys.version_info
    if pyver[0] < 3 or (pyver[0] == 3 and pyver[1] < 4):
        nagios_unknown("check_dane requires Python >= 3.4")

    if args.port < 1 or args.port > 65535:
        nagios_unknown("Invalid port")

    if args.timeout < 0:
        nagios_unknown("Invalid timeout argument")

    check_sshfp_for_host(args)



if __name__ == '__main__':
    main()
